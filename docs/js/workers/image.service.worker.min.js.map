{"version":3,"sources":["src/js/image/image.service.worker.js","../../../src/js/image/image.service.worker.js"],"names":["factory","define","amd","controllers","self","addEventListener","event","id","data","src","options","fetch","AbortController","controller","signal","then","response","blob","postMessage","request","XMLHttpRequest","open","responseType","onload","status","onerror","send","abort"],"mappings":";;;;;CAMC,SAAUA,GACQ,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAOD,GACpDA,IAFD,EAGE,WAAe,aCTjB,IAAMG,EAAc,GAEpBC,KAAKC,iBAAiB,WAAW,SAASC,GACzC,IAAMC,EAAKD,EAAME,KAAKD,GAChBE,EAAMH,EAAME,KAAKC,IACvB,IAAIF,GAAOE,EAAX,CAOA,IAAIC,EACJ,GAAqB,mBAAVC,MAAsB,CAChC,GAAIP,KAAKQ,gBAAiB,CACzB,IAAMC,EAAa,IAAID,gBACvBF,EAAU,CACTI,OAAQD,EAAWC,QAEpBX,EAAYI,GAAMM,EAEFF,MAAMF,EAAKC,GAC1BK,MAAK,SAASC,GACd,OAAOA,EAASC,UAEhBF,MAAK,SAASE,UACPd,EAAYI,GACnBH,KAAKc,YAAY,CAChBT,IAAKA,EACLQ,KAAMA,WAGH,CACN,IAAME,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAOZ,GACpBU,EAAQG,aAAe,OACvBH,EAAQI,OAAS,WACZJ,EAAQK,OAAS,KACpBpB,KAAKc,YAAY,CAChBT,IAAKA,EACLQ,KAAME,EAAQH,YAMjBG,EAAQM,QAAU,aAGlBN,EAAQO,YA5CT,CACC,IAAMb,EAAaV,EAAYI,GAC3BM,GACHA,EAAWc","file":"docs\\js\\workers\\image.service.worker.min.js","sourcesContent":[null,"const controllers = {};\n\nself.addEventListener(\"message\", function(event) {\n\tconst id = event.data.id;\n\tconst src = event.data.src;\n\tif (id && !src) {\n\t\tconst controller = controllers[id];\n\t\tif (controller) {\n\t\t\tcontroller.abort();\n\t\t}\n\t\treturn;\n\t}\n\tlet options;\n\tif (typeof fetch === 'function') {\n\t\tif (self.AbortController) {\n\t\t\tconst controller = new AbortController();\n\t\t\toptions = {\n\t\t\t\tsignal: controller.signal,\n\t\t\t};\n\t\t\tcontrollers[id] = controller;\n\t\t}\n\t\tconst response = fetch(src, options)\n\t\t\t.then(function(response) {\n\t\t\t\treturn response.blob();\n\t\t\t})\n\t\t\t.then(function(blob) {\n\t\t\t\tdelete controllers[id];\n\t\t\t\tself.postMessage({\n\t\t\t\t\tsrc: src,\n\t\t\t\t\tblob: blob\n\t\t\t\t});\n\t\t\t});\n\t} else {\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.open('GET', src);\n\t\trequest.responseType = 'blob';\n\t\trequest.onload = function() {\n\t\t\tif (request.status < 300) {\n\t\t\t\tself.postMessage({\n\t\t\t\t\tsrc: src,\n\t\t\t\t\tblob: request.response\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// new Error('Image didn\\'t load successfully; error code:' + request.statusText);\n\t\t\t}\n\t\t};\n\t\trequest.onerror = function() {\n\t\t\t// new Error('There was a network error.');\n\t\t};\n\t\trequest.send();\n\t}\n});\n\n/*\nself.addEventListener('message', function(event) {\n\t// console.log(event);\n\tconst src = event.data;\n\tconst response = fetch(src).then(function(response) {\n\t\treturn response.blob();\n\t}).then(function(blob) {\n\t\t// Send the image data to the UI thread!\n\t\tself.postMessage({\n\t\t\tsrc: src,\n\t\t\tblob: blob,\n\t\t});\n\t});\n});\n*/\n"]}